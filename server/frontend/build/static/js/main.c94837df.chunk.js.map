{"version":3,"sources":["signup/Form.jsx","login/Form.jsx","404.jsx","firebase.js","todo/todoApp.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["onSubmitFunction","values","console","log","validationSchema","yup","email","required","password","min","max","name","url","Signup","formik","useFormik","initialValues","phone","onSubmit","className","handleSubmit","id","TextField","fullWidth","color","label","variant","value","onChange","handleChange","error","touched","Boolean","errors","helperText","type","to","LoginForm","Nonpath","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","db","getFirestore","userCol","collection","Todo","todo","index","completeTodo","removeTodo","style","textDecoration","isCompleted","text","Button","onClick","TodoForm","addTodo","React","useState","setValue","e","preventDefault","target","MainTodo","todos","setTodos","useEffect","a","getDocs","querySnapshot","forEach","doc","data","push","getData","newTodos","splice","map","App","path","exact","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c94837df.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Formik, Field, Form, useFormik } from \"formik\";\r\nimport Stack from '@mui/material/Stack';\r\nimport TextField from '@mui/material/TextField';\r\nimport * as yup from 'yup';\r\nimport './Form.css'\r\nimport { BrowserRouter  as\r\n  Router,\r\n  Route,\r\n  Switch,\r\n  Link \r\n} from 'react-router-dom';\r\n\r\nfunction onSubmitFunction(values) {\r\n    console.log(\"values: \", values)\r\n  }\r\n\r\n  const validationSchema = yup.object({\r\n    email: yup\r\n      .string('Enter your email')\r\n      .email('Enter a valid email')\r\n      .required('Email is required'),\r\n    password: yup\r\n      .string('Enter your password')\r\n      .min(8, 'Password should be of minimum 8 characters length')\r\n      .max(10, 'No more then 10')\r\n      .required('Password is required'),\r\n    // phone: yup\r\n    //   .string('Enter Your phone number')\r\n    //   .phone(\"please enter valid URL e.g: https://somewebsite.com\")\r\n    //   .required('phone number is required'),\r\n      name: yup\r\n      .string('Enter Your Full Name ')\r\n      .url(\"please enter valid Name\")\r\n      .required('Full Namw is required'),\r\n  });\r\n\r\n\r\nfunction Signup(){\r\n\r\n  \r\n    const formik = useFormik({\r\n        validationSchema : validationSchema,\r\n        initialValues:{\r\n            name: '',\r\n            email:'',\r\n            phone:'',\r\n            password:'',\r\n\r\n        },\r\n        onSubmit: onSubmitFunction\r\n    });\r\n    return(\r\n        <div>\r\n            <h1 className=\"text-center\">\r\n               Welcome To Todo List\r\n            </h1>\r\n\r\n    <div className=\"form d-flex justify-content-center p-5\">\r\n            <div className=\"card\">\r\n        <div className=\"card-header\">\r\n          <center><h3> SignUp Form</h3></center>\r\n        </div>\r\n        <Formik>\r\n        <form onSubmit={formik.handleSubmit} id=\"loginForm\" className=\"card-body px-5 py-4\">\r\n          \r\n          {/* <center><small><span id=\"error\" style={{color: 'red'}} /></small></center>\r\n          <center><label className=\"custom-field\">\r\n              <input \r\n             type=\"text\" \r\n             name=\"email\" \r\n             value={formik.values.email}\r\n             onChange={formik.handleChange}\r\n             error={formik.touched.email && Boolean(formik.errors.email)}\r\n             helpertext={formik.touched.email && formik.errors.email}\r\n             />\r\n            <span className=\"placeholder\">Email Id</span>\r\n            </label><br />\r\n            <label className=\"custom-field\">\r\n            <input id=\"password\" type=\"password\" className=\"input\" \r\n      name=\"password\"\r\n      value={formik.values.password}\r\n      onChange={formik.handleChange}\r\n      error={formik.touched.password && Boolean(formik.errors.password)}\r\n      helpertext={formik.touched.password && formik.errors.password}\r\n      />\r\n              <span className=\"placeholder\">Password</span>\r\n            </label></center><br /><br />\r\n          <a href=\"#\">Forgot Password</a>\r\n          <center><button type=\"submit\" className=\"btn btn-primary\">Login</button>\r\n            <button className=\"btn btn-secondary\">Sign Up</button>\r\n          </center> */}\r\n\r\n\r\n<TextField\r\n            fullWidth\r\n            color=\"primary\"\r\n            id=\"outlined-basic\"\r\n            label=\"Full Name\"\r\n            variant=\"outlined\"\r\n            name=\"name\"\r\n            value={formik.values.name}\r\n            onChange={formik.handleChange}\r\n            error={formik.touched.name && Boolean(formik.errors.name)}\r\n            helperText={formik.touched.name && formik.errors.name}\r\n          />\r\n\r\n\r\n\r\n<TextField\r\n            fullWidth\r\n            // color=\"primary\"\r\n            id=\"outlined-basic\"\r\n            label=\"Email\"\r\n            variant=\"outlined\"\r\n            name=\"email\"\r\n            value={formik.values.email}\r\n            onChange={formik.handleChange}\r\n            error={formik.touched.email && Boolean(formik.errors.email)}\r\n            helperText={formik.touched.email && formik.errors.email}\r\n          />\r\n          \r\n<TextField \r\n           fullWidth\r\n           id=\"outlined-basic\"\r\n           label=\"Phone\"\r\n           variant=\"outlined\"\r\n           name=\"phone\" />\r\n\r\n          <TextField\r\n            fullWidth\r\n            color=\"primary\"\r\n            id=\"outlined-basic\"\r\n            label=\"Password\"\r\n            variant=\"outlined\"\r\n            type=\"password\"\r\n            name=\"password\"\r\n            value={formik.values.password}\r\n            onChange={formik.handleChange}\r\n            error={formik.touched.password && Boolean(formik.errors.password)}\r\n            helperText={formik.touched.password && formik.errors.password}\r\n          />\r\n          \r\n              <center><Link to=\"/\"><button className=\"btn btn-primary\">  Login </button></Link> \r\n            <button type=\"submit\"  className=\"btn btn-secondary\">Sign Up</button>\r\n          </center> \r\n          \r\n        </form>\r\n        </Formik>\r\n    \r\n      </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Signup;","import React from 'react'\r\nimport { Formik, Field, Form, useFormik } from \"formik\";\r\nimport Stack from '@mui/material/Stack';\r\nimport TextField from '@mui/material/TextField';\r\nimport * as yup from 'yup';\r\nimport './Form.css'\r\nimport { BrowserRouter as \r\n  Router,\r\n  Route,\r\n  Switch,\r\n  Link\r\n\r\n} from 'react-router-dom';\r\n\r\nfunction onSubmitFunction(values) {\r\n    console.log(\"values: \", values)\r\n  }\r\n\r\n  const validationSchema = yup.object({\r\n    email: yup\r\n      .string('Enter your email')\r\n      .email('Enter a valid email')\r\n      .required('Email is required'),\r\n    password: yup\r\n      .string('Enter your password')\r\n      .min(8, 'Password should be of minimum 8 characters length')\r\n      .max(10, 'No more then 10')\r\n      .required('Password is required'),\r\n    // phone: yup\r\n    //   .string('Enter Your phone number')\r\n    //   .phone(\"please enter valid URL e.g: https://somewebsite.com\")\r\n    //   .required('phone number is required'),\r\n      name: yup\r\n      .string('Enter Your Full Name ')\r\n      .url(\"please enter valid Name\")\r\n      .required('Full Namw is required'),\r\n  });\r\n\r\n\r\nfunction LoginForm(){\r\n\r\n  \r\n    const formik = useFormik({\r\n        validationSchema : validationSchema,\r\n        initialValues:{\r\n            name: '',\r\n            email:'',\r\n            phone:'',\r\n            password:'',\r\n\r\n        },\r\n        onSubmit: onSubmitFunction\r\n    });\r\n    return(\r\n        <div>\r\n            <h1 className=\"text-center\">\r\n                Welcome to Todo List\r\n            </h1>\r\n\r\n    <div className=\"form d-flex justify-content-center p-5\">\r\n            <div className=\"card\">\r\n        <div className=\"card-header\">\r\n          <center><h3>Login Form</h3></center>\r\n        </div>\r\n        <Formik>\r\n        <form onSubmit={formik.handleSubmit} id=\"loginForm\" className=\"card-body px-5 py-4\">\r\n          \r\n          {/* <center><small><span id=\"error\" style={{color: 'red'}} /></small></center>\r\n          <center><label className=\"custom-field\">\r\n              <input \r\n             type=\"text\" \r\n             name=\"email\" \r\n             value={formik.values.email}\r\n             onChange={formik.handleChange}\r\n             error={formik.touched.email && Boolean(formik.errors.email)}\r\n             helpertext={formik.touched.email && formik.errors.email}\r\n             />\r\n            <span className=\"placeholder\">Email Id</span>\r\n            </label><br />\r\n            <label className=\"custom-field\">\r\n            <input id=\"password\" type=\"password\" className=\"input\" \r\n      name=\"password\"\r\n      value={formik.values.password}\r\n      onChange={formik.handleChange}\r\n      error={formik.touched.password && Boolean(formik.errors.password)}\r\n      helpertext={formik.touched.password && formik.errors.password}\r\n      />\r\n              <span className=\"placeholder\">Password</span>\r\n            </label></center><br /><br />\r\n          <a href=\"#\">Forgot Password</a>\r\n          <center><button type=\"submit\" className=\"btn btn-primary\">Login</button>\r\n            <button className=\"btn btn-secondary\">Sign Up</button>\r\n          </center> */}\r\n\r\n\r\n\r\n<TextField\r\n            fullWidth\r\n            // color=\"primary\"\r\n            id=\"outlined-basic\"\r\n            label=\"Email\"\r\n            variant=\"outlined\"\r\n            name=\"email\"\r\n            value={formik.values.email}\r\n            onChange={formik.handleChange}\r\n            error={formik.touched.email && Boolean(formik.errors.email)}\r\n            helperText={formik.touched.email && formik.errors.email}\r\n          />\r\n          \r\n\r\n          <TextField\r\n            fullWidth\r\n            color=\"primary\"\r\n            id=\"outlined-basic\"\r\n            label=\"Password\"\r\n            variant=\"outlined\"\r\n            type=\"password\"\r\n            name=\"password\"\r\n            value={formik.values.password}\r\n            onChange={formik.handleChange}\r\n            error={formik.touched.password && Boolean(formik.errors.password)}\r\n            helperText={formik.touched.password && formik.errors.password}\r\n          />\r\n          \r\n              <center><button type=\"submit\" className=\"btn btn-primary\">Login</button>\r\n              <Link to=\"/signup\"> <button className=\"btn btn-secondary\"> Sign Up</button></Link>\r\n          </center> \r\n          \r\n        </form>\r\n        </Formik> \r\n    \r\n      </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LoginForm;","\r\n\r\nexport default function Nonpath(){\r\n    return(\r\n        <div>\r\n            <h1>404 Error</h1>\r\n        </div>\r\n    )\r\n}","\r\nimport { initializeApp } from \"firebase/app\"\r\nimport { getFirestore  } from \"firebase/firestore\"\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyDGk9TaZ5OFtpemnturtP01oniU_gijVR8\",\r\n  authDomain: \"zubair-react-todo.firebaseapp.com\",\r\n  projectId: \"zubair-react-todo\",\r\n  storageBucket: \"zubair-react-todo.appspot.com\",\r\n  messagingSenderId: \"224237301888\",\r\n  appId: \"1:224237301888:web:90b5033bf69c89dc107665\",\r\n  measurementId: \"G-CHNYKL0W71\"\r\n};\r\n\r\n// Initialize Firebase\r\n initializeApp(firebaseConfig);\r\n export const db = getFirestore();\r\n","\r\nimport React from \"react\";\r\nimport \"./todo.css\";\r\nimport { TextField , Button} from \"@mui/material\";\r\nimport { collection, addDoc, getDocs } from \"firebase/firestore\"\r\nimport { useEffect, useState } from \"react\"\r\nimport { db } from './../firebase'\r\nconst userCol = collection(db, \"todo\")\r\n\r\nconsole.log(userCol);\r\nfunction Todo({ todo, index, completeTodo ,removeTodo }) {\r\n    return (\r\n      <div\r\n        className=\"todo\"\r\n        style={{ textDecoration: todo.isCompleted ? \"line-through\" : \"\" }}\r\n      >\r\n        {todo.text}\r\n        <div>\r\n          <Button variant=\"success\" onClick={() => completeTodo(index)}>Complete</Button>\r\n          <Button onClick={() => removeTodo(index)} variant=\"contained\"  color=\"error\">Delet</Button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n\r\n\r\n\r\nfunction TodoForm({ addTodo }) {\r\n    const [value, setValue] = React.useState(\"\");\r\n  \r\n    const handleSubmit = e => {\r\n      e.preventDefault();\r\n      if (!value) return;\r\n      addTodo(value);\r\n      setValue(\"\");\r\n    };\r\n  \r\n    return (\r\n      <form onSubmit={handleSubmit}>\r\n              <TextField\r\n            fullWidth\r\n            addTodo={addTodo}\r\n            color=\"primary\"\r\n            id=\"standard-basic\" label=\"Standard\" variant=\"standard\" \r\n            type=\"text\"\r\n            name=\"text\"\r\n            className=\"input\"\r\n            value={value}\r\n          onChange={e => setValue(e.target.value)}\r\n          />\r\n      </form>\r\n    );\r\n  }\r\n\r\nfunction MainTodo() {\r\n    const [todos, setTodos] = React.useState([\r\n        {\r\n          text: \"Learn about React\",\r\n          isCompleted: false\r\n        },\r\n        {\r\n          text: \"Meet friend for lunch\",\r\n          isCompleted: false\r\n        },\r\n        {\r\n          text: \"Build really cool todo app\",\r\n          isCompleted: false\r\n        }\r\n      ]);\r\n      useEffect(() => {\r\n          const getData = async () =>{\r\n              const querySnapshot = await getDocs(userCol);\r\n              let todo = []\r\n              querySnapshot.forEach((doc) =>{\r\n                  console.log(`${doc.id} => ${doc.data()}`);\r\n                  todo.push(doc.data())\r\n              });\r\n              setTodos(todo)\r\n          }\r\n          getData()\r\n          return () => {\r\n             console.log(\"cleanup\")\r\n          };\r\n      }, [])\r\n  const addTodo = text => {\r\n    const newTodos = [...todos, { text }];\r\n    setTodos(newTodos);\r\n  };\r\n\r\n\r\n  const completeTodo = index => {\r\n    const newTodos = [...todos];\r\n    newTodos[index].isCompleted = true;\r\n    setTodos(newTodos);\r\n  };\r\n  const removeTodo = index => {\r\n    const newTodos = [...todos];\r\n    newTodos.splice(index, 1);\r\n    setTodos(newTodos);\r\n  };\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <div className=\"card\">\r\n     <div className=\"name\">\r\n    <h1>login as zubair</h1>\r\n     </div>\r\n\r\n        {todos.map((todo, index) => (\r\n          <Todo\r\n            key={index}\r\n            index={index}\r\n            todo={todo}\r\n            completeTodo={completeTodo}\r\n            removeTodo={removeTodo}\r\n          />\r\n        ))}\r\n        <TodoForm addTodo={addTodo} />\r\n          \r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MainTodo;","import './App.css';\n// import { Formik, Field, Form, useFormik } from \"formik\";\n// import Stack from '@mui/material/Stack';\n// import TextField from '@mui/material/TextField';\n// import Button from '@mui/material/Button';\n// import * as yup from 'yup';\nimport Signup from './signup/Form';\nimport LoginForm from './login/Form';\nimport Nonpath from './404';\nimport MainTodo from './todo/todoApp';\nimport { BrowserRouter as \n         Router,\n         Switch,\n         Route,\n         Link\n\n} from 'react-router-dom';\n\n\n\n\n\nfunction App(){\n  return(\n    \n    <div>\n    <Router>\n      <Switch>\n      <Route  path='/todo'>\n        <MainTodo />\n        </Route>\n        <Route  path='/signup'>\n        <Signup />\n        </Route>\n        <Route exact path='/'>\n        <LoginForm />\n        </Route>\n        <Route  component={404}>\n        <Nonpath />\n        </Route>\n      </Switch>\n    \n    </Router>\n      \n    </div>\n  )\n}\n\n\n// // function doSomething(values) {\n// //   console.log(\"values: \", values)\n// // }\n// function onSubmitFunction(values) {\n//   console.log(\"values: \", values)\n// }\n\n// const validationSchema = yup.object({\n//   email: yup\n//     .string('Enter your email')\n//     .email('Enter a valid email')\n//     .required('Email is required'),\n//   password: yup\n//     .string('Enter your password')\n//     .min(8, 'Password should be of minimum 8 characters length')\n//     .max(10, 'No more then 10')\n//     .required('Password is required'),\n//   website: yup\n//     .string('Enter Your Website link')\n//     .url(\"please enter valid URL e.g: https://somewebsite.com\")\n//     .required('link is required'),\n// });\n\n\n// function App() {\n\n//   const formik = useFormik({\n//     validationSchema: validationSchema,\n//     initialValues: {\n//       website: '',\n//       email: '',\n//       password: '',\n//     },\n//     onSubmit: onSubmitFunction\n//   });\n\n\n//   return ( \n    \n\n\n//     <div style={{ padding: \"1rem\" }}>\n\n//       {/* <Formik\n//         initialValues={{ name: \"\", email: \"\" }}\n//         onSubmit={doSomething}\n//       >\n//         <Form>\n//           <Field name=\"name\" type=\"text\" />\n//           <Field name=\"email\" type=\"email\" />\n//           <button type=\"submit\">Submit</button>\n//         </Form>\n//       </Formik> */}\n\n// <Formik>\n// <form onSubmit={formik.handleSubmit}>\n//         <Stack spacing={2}>\n//           <TextField\n//             fullWidth\n//             color=\"primary\"\n//             id=\"outlined-basic\"\n//             label=\"Enter your website\"\n//             variant=\"outlined\"\n//             name=\"website\"\n//             value={formik.values.website}\n//             onChange={formik.handleChange}\n//             error={formik.touched.website && Boolean(formik.errors.website)}\n//             helperText={formik.touched.website && formik.errors.website}\n//           />\n\n//           <TextField\n//             fullWidth\n//             color=\"primary\"\n//             id=\"outlined-basic\"\n//             label=\"Outlined\"\n//             variant=\"outlined\"\n//             name=\"email\"\n//             value={formik.values.email}\n//             onChange={formik.handleChange}\n//             error={formik.touched.email && Boolean(formik.errors.email)}\n//             helperText={formik.touched.email && formik.errors.email}\n//           />\n\n//           <TextField\n//             fullWidth\n//             color=\"primary\"\n//             id=\"filled-basic\"\n//             label=\"Outlined\"\n//             variant=\"outlined\"\n//             type=\"password\"\n//             name=\"password\"\n//             value={formik.values.password}\n//             onChange={formik.handleChange}\n//             error={formik.touched.password && Boolean(formik.errors.password)}\n//             helperText={formik.touched.password && formik.errors.password}\n//           />\n\n//           <Button fullWidth variant=\"contained\" color=\"primary\" type=\"submit\">Button</Button>\n//         </Stack>\n\n//       </form>\n\n// </Formik>\n\n     \n//     </div>\n//   );\n// }\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}